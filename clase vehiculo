{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/M-Velazco/python/blob/main/clase%20vehiculo\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este segundo ejercicio, tendréis que crear un archivo py y dentro crearéis una clase Vehículo, haréis un objeto de ella, lo guardaréis en un archivo y luego lo cargamos."
      ],
      "metadata": {
        "id": "YQ18QNDX4VMP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "\n",
        "class CombustibleInsuficienteError(Exception):\n",
        "    pass\n",
        "\n",
        "\n",
        "class DesperdicioCombustibleError(Exception):\n",
        "    pass\n",
        "\n",
        "\n",
        "class Vehiculo:\n",
        "    def __init__(self, marca, modelo, patente, tamañoTanque, cantidadCombustible, rendimiento) -> None:\n",
        "        self.marca = marca\n",
        "        self.modelo = modelo\n",
        "        self.patente = patente\n",
        "        self.tamañoTanque = tamañoTanque  # En litros\n",
        "        self.cantidadCombustible = tamañoTanque if cantidadCombustible > tamañoTanque else cantidadCombustible\n",
        "        self.rendimiento = rendimiento  # Kilometros/litro\n",
        "\n",
        "    def viajar(self, kilometros):\n",
        "        \"\"\"\n",
        "            Devuelve la cantidad de combustible luego de realizar un viaje. En caso de no haber suficiente combustible para realizar dicho viaje, dispara una excepcion\n",
        "        \"\"\"\n",
        "        if self.cantidadCombustible * self.rendimiento < kilometros:\n",
        "            raise CombustibleInsuficienteError(\n",
        "                \"Debes cargar combustible en un punto intermedio\")\n",
        "\n",
        "        self.cantidadCombustible -= kilometros/self.rendimiento\n",
        "        return self.cantidadCombustible\n",
        "\n",
        "    def cargarCombustible(self, litros):\n",
        "        \"\"\"\n",
        "            Devuelve la cantidad de combustible luego de cargar. En caso de que el combustible exceda el tamaño del tanque dispara una excepción\n",
        "        \"\"\"\n",
        "        if self.cantidadCombustible+litros > self.tamañoTanque:\n",
        "            raise DesperdicioCombustibleError(\n",
        "                f'Rebalzara el tanque de combustible. Puede cargar hasta {self.tamañoTanque-self.cantidadCombustible} litros.')\n",
        "        self.cantidadCombustible += litros\n",
        "        return self.cantidadCombustible\n",
        "\n",
        "    def __str__(self) -> str:\n",
        "        return f'La marca del vehiculo es:{self.marca}.\\nEl modelo del vehiculo es:{self.modelo}.\\nLa patente es:{self.patente}.\\nTiene un tanque de {self.tamañoTanque} litros.\\nActualmente tiene {self.cantidadCombustible} litros de combustible.\\nSu rendimiento es: {self.rendimiento} km/l'\n",
        "\n",
        "\n",
        "class Serializador:\n",
        "    def __init__(self, path) -> None:\n",
        "        self.path = path\n",
        "\n",
        "    def serializar(self, object) -> None:\n",
        "        \"\"\"\n",
        "            Convierte un objeto en una secuencia de bytes para almacenarlo en un archivo.\n",
        "        \"\"\"\n",
        "        f = open(self.path, 'wb')\n",
        "        pickle.dump(object, f)\n",
        "        f.close()\n",
        "\n",
        "    def deserializar(self) -> object:\n",
        "        \"\"\"\n",
        "            Convierte una representacion textual de un objeto (datos serializados) provenientes de un archivo  en un objeto.\n",
        "        \"\"\"\n",
        "        f = open(self.path, 'rb')\n",
        "        object = pickle.load(f)\n",
        "        f.close()\n",
        "        return object\n",
        "\n",
        "\n",
        "class Test:\n",
        "    def main():\n",
        "        serializador = Serializador('vehiculo.bin')\n",
        "        auto = Vehiculo('Volkswagen', 'Polo', 'AA123BB', 60, 30, 15)\n",
        "        print(\"El vehiculo creado es:\\n\")\n",
        "        print(auto)\n",
        "        print('Serializado vehiculo en archivo vehiculo.bin')\n",
        "        serializador.serializar(auto)\n",
        "        vehiculo = serializador.deserializar()\n",
        "        print(\"\\nVehiculo deserializado:\\n\")\n",
        "        print(vehiculo)\n",
        "        print(\n",
        "            f'Luego de un viaje de 200 km el vehiculo tiene {vehiculo.viajar(200)} litros de combustible.')\n",
        "        print(\n",
        "            f'Si cargamos 15 litros  vehiculo tiene {vehiculo.cargarCombustible(15)} litros de combustible.')\n",
        "        print(vehiculo)\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    Test.main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HzMGrbBT5fzd",
        "outputId": "1f34930f-1f34-4903-b708-ab4d7320f2f8"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El vehiculo creado es:\n",
            "\n",
            "La marca del vehiculo es:Volkswagen.\n",
            "El modelo del vehiculo es:Polo.\n",
            "La patente es:AA123BB.\n",
            "Tiene un tanque de 60 litros.\n",
            "Actualmente tiene 30 litros de combustible.\n",
            "Su rendimiento es: 15 km/l\n",
            "Serializado vehiculo en archivo vehiculo.bin\n",
            "\n",
            "Vehiculo deserializado:\n",
            "\n",
            "La marca del vehiculo es:Volkswagen.\n",
            "El modelo del vehiculo es:Polo.\n",
            "La patente es:AA123BB.\n",
            "Tiene un tanque de 60 litros.\n",
            "Actualmente tiene 30 litros de combustible.\n",
            "Su rendimiento es: 15 km/l\n",
            "Luego de un viaje de 200 km el vehiculo tiene 16.666666666666664 litros de combustible.\n",
            "Si cargamos 15 litros  vehiculo tiene 31.666666666666664 litros de combustible.\n",
            "La marca del vehiculo es:Volkswagen.\n",
            "El modelo del vehiculo es:Polo.\n",
            "La patente es:AA123BB.\n",
            "Tiene un tanque de 60 litros.\n",
            "Actualmente tiene 31.666666666666664 litros de combustible.\n",
            "Su rendimiento es: 15 km/l\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}