{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/M-Velazco/python/blob/main/tabla%20alumnos\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este ejercicio tendréis que crear una tabla llamada Alumnos que constará de tres columnas: la columna id de tipo entero, la columna nombre que será de tipo texto y la columna apellido que también será de tipo texto.\n",
        "\n",
        "Una vez creada la tabla, tenéis que insertarle datos, como mínimo tenéis que insertar 8 alumnos a la tabla.\n",
        "\n",
        "Por último, tienes que realizar una búsqueda de un alumno por nombre y mostrar los datos por consola."
      ],
      "metadata": {
        "id": "rYjqtt4y93yd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from models.alumno import ModelAlumno\n",
        "\n",
        "\n",
        "def main():\n",
        "    # Cantidad de alumnos\n",
        "    cantidad = ModelAlumno.cantidad()\n",
        "    # Si la tabla esta vacia insertar 8 alumnos\n",
        "    if cantidad == 0:\n",
        "        ModelAlumno.crear(cantidad+1, 'Juan', 'Perez')\n",
        "        ModelAlumno.crear(cantidad+2, 'Daniel', 'Garcia')\n",
        "        ModelAlumno.crear(cantidad+3, 'Juan', 'Denardi')\n",
        "        ModelAlumno.crear(cantidad+4, 'Miguel', 'Ramirez')\n",
        "        ModelAlumno.crear(cantidad+5, 'Fernando', 'Gomez')\n",
        "        ModelAlumno.crear(cantidad+6, 'Marcelo', 'Hernandez')\n",
        "        ModelAlumno.crear(cantidad+7, 'Daniel', 'Giri')\n",
        "        ModelAlumno.crear(cantidad+8, 'Hugo', 'Maldonado')\n",
        "\n",
        "    # Menu\n",
        "    opcion = \"\"\n",
        "    while opcion != \"q\":\n",
        "        print(\"---------------------------------------\")\n",
        "        print(\"Menu:\")\n",
        "        print(\"\\t1- Ver alumnos\")\n",
        "        print(\"\\t2- Registrar alumno\")\n",
        "        print(\"\\t3- Buscar alumno por nombre\")\n",
        "        print(\"\\t4- Borrar alumno por id\")\n",
        "        print(\"\\tq- Salir\")\n",
        "        print(\"---------------------------------------\")\n",
        "        opcion = input(\"Elija una opción:\")\n",
        "\n",
        "        # Ver alumnos\n",
        "        if opcion == \"1\":\n",
        "            alumnos = ModelAlumno.obtenerTodos()\n",
        "            print(\"ALUMNOS\")\n",
        "            for alumno in alumnos:\n",
        "                print(alumno)\n",
        "            continue\n",
        "\n",
        "        # Registrar alumno\n",
        "        if opcion == \"2\":\n",
        "            alumno = {'id': 0, 'nombre': \"\", 'apellido': \"\"}\n",
        "\n",
        "            while alumno[\"id\"] == 0 or alumno['nombre'] == \"\" or alumno[\"apellido\"] == \"\":\n",
        "                if alumno[\"id\"] == 0:\n",
        "                    id = input(\"Ingrese el id: \")\n",
        "                    if not id.isdecimal():\n",
        "                        print(\"El id debe ser un nro mayor que cero\")\n",
        "                        continue\n",
        "                    alumno[\"id\"] = int(id)\n",
        "                if alumno[\"nombre\"] == \"\":\n",
        "                    nombre = input(\"Ingrese el nombre: \")\n",
        "                    if nombre == \"\":\n",
        "                        print(\"El nombre debe no puede ser una cadena vacia\")\n",
        "                        continue\n",
        "                    alumno[\"nombre\"] = nombre.capitalize()\n",
        "                if alumno[\"apellido\"] == \"\":\n",
        "                    apellido = input(\"Ingrese el apellido: \")\n",
        "                    if apellido == \"\":\n",
        "                        print(\"El apellido debe no puede ser una cadena vacia\")\n",
        "                        continue\n",
        "                    alumno[\"apellido\"] = apellido.capitalize()\n",
        "            try:\n",
        "                ModelAlumno.crear(\n",
        "                    alumno[\"id\"], alumno[\"nombre\"], alumno[\"apellido\"])\n",
        "            except Exception as e:\n",
        "                print(e)\n",
        "            continue\n",
        "\n",
        "        # Buscar alumno por nombre\n",
        "        if opcion == \"3\":\n",
        "            nombre = \"\"\n",
        "            while nombre == \"\":\n",
        "                nombre = input(\"Ingrese el nombre: \").capitalize()\n",
        "                if nombre == \"\":\n",
        "                    print(\"El nombre debe no puede ser una cadena vacia\")\n",
        "            alumnos = ModelAlumno.buscar({'nombre': nombre})\n",
        "            if len(alumnos) == 0:\n",
        "                print(f\"\\nNingun alumno tiene el nombre: {nombre}\\n\")\n",
        "            for alumno in alumnos:\n",
        "                print(alumno)\n",
        "            continue\n",
        "\n",
        "        # Borrar alumno\n",
        "        if opcion == \"4\":\n",
        "            id = 0\n",
        "            while id == 0:\n",
        "                id = input(\"Ingrese el id: \")\n",
        "                if not id.isdecimal():\n",
        "                    print(\"El id debe ser un nro mayor que cero\")\n",
        "                    id = 0\n",
        "            filas_afectadas = ModelAlumno.eliminar(int(id))\n",
        "            if filas_afectadas > 0:\n",
        "                print(f\"Se borro correctamente el alumno con id: {id}\")\n",
        "            else:\n",
        "                print(f'No hay ningun alumno con el id:{id}')\n",
        "            continue\n",
        "\n",
        "        # Ingreso de opción invalida\n",
        "        if opcion != \"q\":\n",
        "            print(f'\\nEl valor \"{opcion}\" no es una opción valida...\\n')\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "id": "1iW9P7vJC7Is",
        "outputId": "0f66a2d6-6e68-4cbc-9c12-ad959e0286db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        }
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-92f2faa3a344>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malumno\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mModelAlumno\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;31m# Cantidad de alumnos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'models'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}